>>> add_integer = __import__('0-add_integer').add_integer

# testing a > b
>>> add_integer(1, 2)
3

# testing a < b
>>> add_integer(2, 1)
3

# testing a = b
>>> add_integer(2, 2)
4

# testing negative a
>>> add_integer(-2, 2)
0

# testing negative b
>>> add_integer(2, -2)
0

# testing negative a and b
>>> add_integer(-2, -2)
-4

# testing None a
>>> add_integer(None, 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing None b
>>> add_integer(2, None)
Traceback (most recent call last):
	...
TypeError: b must be an integer

# testing None a and b
>>> add_integer(None, None)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing float a
>>> add_integer(2.12, 2)
4

# testing float b
>>> add_integer(2, 2.12)
4

# tesintg float a and b
>>> add_integer(2.12, 2.12)
4

# testing negative float a
>>> add_integer(-2.12, 2)
0

# testing negative float b
>>> add_integer(2, -2.12)
0

# testing negative float a and b
>>> add_integer(-2.12, -2.12)
-4

# testing string a
>>> add_integer("a", 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing string b
>>> add_integer(2, "b")
Traceback (most recent call last):
	...
TypeError: b must be an integer

# testing string a and b
>>> add_integer("a", "b")
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing massive int
>>> add_integer(10**100, 1)
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001

# testing default argument positive
>>> add_integer(2)
100

# testing default argument negative
>>> add_integer(-2)
96

# testing default argument zero
>>> add_integer(0)
98

# testing list a
>>> add_integer([1, 2], 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing list b
>>> add_integer(2, [1, 2])
Traceback (most recent call last):
	...
TypeError: b must be an integer

# testing list a and b
>>> add_integer([1, 2], [1, 2])
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing dic a
>>> add_integer({"abc": 2}, 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing dic b
>>> add_integer(2, {"abc": 2})
Traceback (most recent call last):
	...
TypeError: b must be an integer

# testing dic a and b
>>> add_integer({"abc": 2}, {"abc": 2})
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing tuble a
>>> add_integer((1, 2), 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing tuble b
>>> add_integer(2, (1, 2))
Traceback (most recent call last):
	...
TypeError: b must be an integer

# testing tuble a and b
>>> add_integer((1, 2), (1, 2))
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing set a
>>> add_integer({1, 2}, 2)
Traceback (most recent call last):
	...
TypeError: a must be an integer

# testing set b
>>> add_integer(2, {1, 2})
Traceback (most recent call last):
	...
TypeError: b must be an integer

# testing set a and b
>>> add_integer({1, 2}, {1, 2})
Traceback (most recent call last):
	...
TypeError: a must be an integer


